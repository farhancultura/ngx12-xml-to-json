{"version":3,"file":"ngx-xml-to-json.js","sources":["ngx-xml-to-json/lib/ngx-xml-to-json.service.ts","ngx-xml-to-json/lib/ngx-xml-to-json.component.ts","ngx-xml-to-json/lib/ngx-xml-to-json.module.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxXmlToJsonService {\n  private parser: any;\n  private mimeType:any = 'text/xml';\n  constructor() { \n    this.parser = new DOMParser();\n  }\n\n  xmlToJson(xmlString: string, myOptions: any) {\n    let jsonObj = Object.create(null);\n    let obj = {};\n    const options = { // set up the default options \n      mergeCDATA: false, // extract cdata and merge with text\n      cDataKey:'cData',\n      textKey: 'text', // tag name for text nodes\n      valueKey: 'value', // tag name for attribute values\n      attrKey: 'attr', // tag for attr groups\n      cdataKey: 'cdata', // tag for cdata nodes (ignored if mergeCDATA is true)\n    };\n    // update the options\n    for(let prop in myOptions ) {\n      if(options[prop] !== undefined) {\n        options[prop] = myOptions[prop];\n      }\n    }\n    let xmlDoc = this.parser.parseFromString(xmlString, this.mimeType);\n    obj = this.convertToJson(xmlDoc, options);\n    return Object.assign(jsonObj, obj);\n  }\n\n  private convertToJson(doc, opt){\n    let obj = {};\n    switch(doc.nodeType) {\n      case 1 : // ELEMENT_NODE\n        const eleAttr = doc.attributes;\n        if (eleAttr.length > 0) {\n          obj[opt.attrKey] = {};\n          for( let i= 0 ; i< eleAttr.length; i++ ) {\n            const attribute = eleAttr[i];\n            obj[opt.attrKey][attribute.nodeName] = attribute['nodeValue'];\n          }\n        }\n        break;\n      case 3 : // TEXT_NODE\n        obj = doc.nodeValue;\n        break;\n      case 4 : // CDATA_SECTION_NODE\n        obj = doc.nodeValue;\n        break;\n      case 7 : // PROCESSING_INSTRUCTION_NODE\n        obj = doc.nodeValue;\n        break;\n      default:\n        \n    }\n    \n    if( doc.hasChildNodes()){\n      if(doc.childNodes.length === 1 && doc.childNodes[0]['nodeType'] === 3){\n        obj[opt.textKey] = doc.childNodes[0]['nodeValue'];\n      } else {\n        doc.childNodes.forEach(node => {\n          let cData: any;\n          let nodeName = node.nodeType === 3 ? opt.textKey : node.nodeName;\n          if(obj[nodeName] === undefined) {\n            if( node.nodeType === 4 ){\n              cData = this.convertToJson(node,opt);\n              if(!opt.mergeCDATA){\n                obj[opt.cDataKey] = cData;\n              }\n            } else {\n              obj[nodeName] = cData === undefined ? this.convertToJson(node,opt) : `${cData}${this.convertToJson(node,opt)}`;\n            }\n          } else {\n            const previousNode = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(previousNode);\n            obj[nodeName].push(this.convertToJson(node, opt));\n          }\n        });\n      }\n    }\n    return obj;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-ngx-xml-to-json',\n  template: `\n    <p>\n      ngx-xml-to-json works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxXmlToJsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxXmlToJsonComponent } from './ngx-xml-to-json.component';\n\n@NgModule({\n  declarations: [NgxXmlToJsonComponent],\n  imports: [\n  ],\n  exports: [NgxXmlToJsonComponent]\n})\nexport class NgxXmlToJsonModule { }\n"]}