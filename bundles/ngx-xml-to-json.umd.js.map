{"version":3,"file":"ngx-xml-to-json.umd.js","sources":["ng://ngx-xml-to-json/lib/ngx-xml-to-json.service.ts","ng://ngx-xml-to-json/lib/ngx-xml-to-json.component.ts","ng://ngx-xml-to-json/lib/ngx-xml-to-json.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxXmlToJsonService {\n  private parser: any;\n  private mimeType:any = 'text/xml';\n  constructor() { \n    this.parser = new DOMParser();\n  }\n\n  xmlToJson(xmlString: string, myOptions: any) {\n    let jsonObj = Object.create(null);\n    let obj = {};\n    const options = { // set up the default options \n      mergeCDATA: false, // extract cdata and merge with text\n      cDataKey:'cData',\n      textKey: 'text', // tag name for text nodes\n      valueKey: 'value', // tag name for attribute values\n      attrKey: 'attr', // tag for attr groups\n      cdataKey: 'cdata', // tag for cdata nodes (ignored if mergeCDATA is true)\n    };\n    // update the options\n    for(let prop in myOptions ) {\n      if(options[prop] !== undefined) {\n        options[prop] = myOptions[prop];\n      }\n    }\n    let xmlDoc = this.parser.parseFromString(xmlString, this.mimeType);\n    obj = this.convertToJson(xmlDoc, options);\n    return Object.assign(jsonObj, obj);\n  }\n\n  private convertToJson(doc, opt){\n    let obj = {};\n    switch(doc.nodeType) {\n      case 1 : // ELEMENT_NODE\n        const eleAttr = doc.attributes;\n        if (eleAttr.length > 0) {\n          obj[opt.attrKey] = {};\n          for( let i= 0 ; i< eleAttr.length; i++ ) {\n            const attribute = eleAttr[i];\n            obj[opt.attrKey][attribute.nodeName] = attribute['nodeValue'];\n          }\n        }\n        break;\n      case 3 : // TEXT_NODE\n        obj = doc.nodeValue;\n        break;\n      case 4 : // CDATA_SECTION_NODE\n        obj = doc.nodeValue;\n        break;\n      case 7 : // PROCESSING_INSTRUCTION_NODE\n        obj = doc.nodeValue;\n        break;\n      default:\n        \n    }\n    \n    if( doc.hasChildNodes()){\n      if(doc.childNodes.length === 1 && doc.childNodes[0]['nodeType'] === 3){\n        obj[opt.textKey] = doc.childNodes[0]['nodeValue'];\n      } else {\n        doc.childNodes.forEach(node => {\n          let cData: any;\n          let nodeName = node.nodeType === 3 ? opt.textKey : node.nodeName;\n          if(obj[nodeName] === undefined) {\n            if( node.nodeType === 4 ){\n              cData = this.convertToJson(node,opt);\n              if(!opt.mergeCDATA){\n                obj[opt.cDataKey] = cData;\n              }\n            } else {\n              obj[nodeName] = cData === undefined ? this.convertToJson(node,opt) : `${cData}${this.convertToJson(node,opt)}`;\n            }\n          } else {\n            const previousNode = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(previousNode);\n            obj[nodeName].push(this.convertToJson(node, opt));\n          }\n        });\n      }\n    }\n    return obj;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-ngx-xml-to-json',\n  template: `\n    <p>\n      ngx-xml-to-json works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxXmlToJsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxXmlToJsonComponent } from './ngx-xml-to-json.component';\n\n@NgModule({\n  declarations: [NgxXmlToJsonComponent],\n  imports: [\n  ],\n  exports: [NgxXmlToJsonComponent]\n})\nexport class NgxXmlToJsonModule { }\n"],"names":["Injectable","Component","NgModule"],"mappings":"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"}