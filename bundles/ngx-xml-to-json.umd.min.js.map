{"version":3,"sources":["ng://ngx-xml-to-json/lib/ngx-xml-to-json.service.ts","ng://ngx-xml-to-json/lib/ngx-xml-to-json.component.ts","ng://ngx-xml-to-json/lib/ngx-xml-to-json.module.ts"],"names":["NgxXmlToJsonService","this","mimeType","parser","DOMParser","prototype","xmlToJson","xmlString","myOptions","obj","jsonObj","Object","create","options","mergeCDATA","cDataKey","textKey","valueKey","attrKey","cdataKey","prop","undefined","xmlDoc","parseFromString","convertToJson","assign","doc","opt","_this","nodeType","eleAttr","attributes","length","i","attribute","nodeName","nodeValue","hasChildNodes","childNodes","forEach","node","cData","previousNode","push","Injectable","args","providedIn","NgxXmlToJsonComponent","ngOnInit","Component","selector","template","NgxXmlToJsonModule","NgModule","declarations","imports","exports"],"mappings":"sRAAA,IAAAA,EAAA,WAQE,SAAAA,IADQC,KAAAC,SAAe,WAErBD,KAAKE,OAAS,IAAIC,iBAGpBJ,EAAAK,UAAAC,UAAA,SAAUC,EAAmBC,OAEvBC,EADAC,EAAUC,OAAOC,OAAO,MAEtBC,EAAU,CACdC,YAAY,EACZC,SAAS,QACTC,QAAS,OACTC,SAAU,QACVC,QAAS,OACTC,SAAU,SAGZ,IAAI,IAAIC,KAAQZ,EACXK,EAAQO,KAAUC,YACnBR,EAAQO,GAAQZ,EAAUY,QAG1BE,EAASrB,KAAKE,OAAOoB,gBAAgBhB,EAAWN,KAAKC,UAEzD,OADAO,EAAMR,KAAKuB,cAAcF,EAAQT,GAC1BF,OAAOc,OAAOf,EAASD,IAGxBT,EAAAK,UAAAmB,cAAR,SAAsBE,EAAKC,GAA3B,IAAAC,EAAA3B,KACMQ,EAAM,GACV,OAAOiB,EAAIG,UACT,KAAK,MACGC,EAAUJ,EAAIK,WACpB,GAAID,EAAQE,OAAS,EAAG,CACtBvB,EAAIkB,EAAIT,SAAW,GACnB,IAAK,IAAIe,EAAG,EAAIA,EAAGH,EAAQE,OAAQC,IAAM,KACjCC,EAAYJ,EAAQG,GAC1BxB,EAAIkB,EAAIT,SAASgB,EAAUC,UAAYD,EAAqB,WAGhE,MACF,KAAK,EAGL,KAAK,EAGL,KAAK,EACHzB,EAAMiB,EAAIU,UA+Bd,OAzBIV,EAAIW,kBACuB,IAA1BX,EAAIY,WAAWN,QAAkD,IAAlCN,EAAIY,WAAW,GAAa,SAC5D7B,EAAIkB,EAAIX,SAAWU,EAAIY,WAAW,GAAc,UAEhDZ,EAAIY,WAAWC,QAAO,SAACC,OACjBC,EACAN,EAA6B,IAAlBK,EAAKX,SAAiBF,EAAIX,QAAUwB,EAAKL,SACxD,GAAG1B,EAAI0B,KAAcd,UACG,IAAlBmB,EAAKX,UACPY,EAAQb,EAAKJ,cAAcgB,EAAKb,GAC5BA,EAAIb,aACNL,EAAIkB,EAAIZ,UAAY0B,IAGtBhC,EAAI0B,GAAYM,IAAUpB,UAAYO,EAAKJ,cAAcgB,EAAKb,GAAO,GAAGc,EAAQb,EAAKJ,cAAcgB,EAAKb,OAErG,KACCe,EAAejC,EAAI0B,GACzB1B,EAAI0B,GAAY,GAChB1B,EAAI0B,GAAUQ,KAAKD,GACnBjC,EAAI0B,GAAUQ,KAAKf,EAAKJ,cAAcgB,EAAMb,QAK7ClB,uBAnFVmC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAHd,GCAAC,EAAA,WAaE,SAAAA,KAKF,OAHEA,EAAA1C,UAAA2C,SAAA,iCAbDC,EAAAA,UAASJ,KAAA,CAAC,CACTK,SAAU,sBACVC,SAAU,kGAcZJ,EAlBA,GCAAK,EAAA,WAGA,SAAAA,KAMkC,2BANjCC,EAAAA,SAAQR,KAAA,CAAC,CACRS,aAAc,CAACP,GACfQ,QAAS,GAETC,QAAS,CAACT,OAEsBK,EATlC","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxXmlToJsonService {\n  private parser: any;\n  private mimeType:any = 'text/xml';\n  constructor() { \n    this.parser = new DOMParser();\n  }\n\n  xmlToJson(xmlString: string, myOptions: any) {\n    let jsonObj = Object.create(null);\n    let obj = {};\n    const options = { // set up the default options \n      mergeCDATA: false, // extract cdata and merge with text\n      cDataKey:'cData',\n      textKey: 'text', // tag name for text nodes\n      valueKey: 'value', // tag name for attribute values\n      attrKey: 'attr', // tag for attr groups\n      cdataKey: 'cdata', // tag for cdata nodes (ignored if mergeCDATA is true)\n    };\n    // update the options\n    for(let prop in myOptions ) {\n      if(options[prop] !== undefined) {\n        options[prop] = myOptions[prop];\n      }\n    }\n    let xmlDoc = this.parser.parseFromString(xmlString, this.mimeType);\n    obj = this.convertToJson(xmlDoc, options);\n    return Object.assign(jsonObj, obj);\n  }\n\n  private convertToJson(doc, opt){\n    let obj = {};\n    switch(doc.nodeType) {\n      case 1 : // ELEMENT_NODE\n        const eleAttr = doc.attributes;\n        if (eleAttr.length > 0) {\n          obj[opt.attrKey] = {};\n          for( let i= 0 ; i< eleAttr.length; i++ ) {\n            const attribute = eleAttr[i];\n            obj[opt.attrKey][attribute.nodeName] = attribute['nodeValue'];\n          }\n        }\n        break;\n      case 3 : // TEXT_NODE\n        obj = doc.nodeValue;\n        break;\n      case 4 : // CDATA_SECTION_NODE\n        obj = doc.nodeValue;\n        break;\n      case 7 : // PROCESSING_INSTRUCTION_NODE\n        obj = doc.nodeValue;\n        break;\n      default:\n        \n    }\n    \n    if( doc.hasChildNodes()){\n      if(doc.childNodes.length === 1 && doc.childNodes[0]['nodeType'] === 3){\n        obj[opt.textKey] = doc.childNodes[0]['nodeValue'];\n      } else {\n        doc.childNodes.forEach(node => {\n          let cData: any;\n          let nodeName = node.nodeType === 3 ? opt.textKey : node.nodeName;\n          if(obj[nodeName] === undefined) {\n            if( node.nodeType === 4 ){\n              cData = this.convertToJson(node,opt);\n              if(!opt.mergeCDATA){\n                obj[opt.cDataKey] = cData;\n              }\n            } else {\n              obj[nodeName] = cData === undefined ? this.convertToJson(node,opt) : `${cData}${this.convertToJson(node,opt)}`;\n            }\n          } else {\n            const previousNode = obj[nodeName];\n            obj[nodeName] = [];\n            obj[nodeName].push(previousNode);\n            obj[nodeName].push(this.convertToJson(node, opt));\n          }\n        });\n      }\n    }\n    return obj;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'ngx-ngx-xml-to-json',\n  template: `\n    <p>\n      ngx-xml-to-json works!\n    </p>\n  `,\n  styles: []\n})\nexport class NgxXmlToJsonComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { NgxXmlToJsonComponent } from './ngx-xml-to-json.component';\n\n@NgModule({\n  declarations: [NgxXmlToJsonComponent],\n  imports: [\n  ],\n  exports: [NgxXmlToJsonComponent]\n})\nexport class NgxXmlToJsonModule { }\n"]}